// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM4K.hdl

/**
 * Memory of 4K registers, each 16 bit-wide. Out hold the value
 * stored at the memory location specified by address. If load=1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out after the next time step.)
 */

CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
    // Put your code here:
    //NOTE: not using Dmuxes here to form RAM load lines because
    // 1) in reality, "load" path to RAMs will be a critical path.
    //  so must gate it in as late as possible to minimize its gate delays
    // if use Mux, then it is gated in from the beginning and
    //goes through the path of muxes before it reaches the RAMs
    //  
    // 2) RAMS are highly used parts.  This decode saves 4 gates, compared to using Dmuxes.

     //Decode upper 3 address bits
    Not(in=address[9], out=NotAddLow);
    Not(in=address[10], out=NotAddMid);
    Not(in=address[11], out=NotAddHi);    

    //add bits 3 and 4 decode
    And(a=NotAddLow,  b=NotAddMid,   out=add00);
    And(a=address[9], b=NotAddMid,   out=add01);
    And(a=NotAddLow,  b=address[10],  out=add10);
    And(a=address[9], b=address[10],  out=add11);

    //msb decode with load enable

    //combine msb witih load enable
    //gating with load enable here is fastest and saves gates
    And(a=NotAddHi,   b=load, out=LoadNotAddHi);
    And(a=address[11], b=load, out=LoadAddHi);

    //msb=0
    And(a=add00, b=LoadNotAddHi, out=loadA);
    And(a=add01, b=LoadNotAddHi, out=loadB);
    And(a=add10, b=LoadNotAddHi, out=loadC);
    And(a=add11, b=LoadNotAddHi, out=loadD);

    //msb=1 
    And(a=add00, b=LoadAddHi,  out=loadE);
    And(a=add01, b=LoadAddHi,  out=loadF);
    And(a=add10, b=LoadAddHi,  out=loadG);
    And(a=add11, b=LoadAddHi,  out=loadH);
 
    RAM512(in=in, load=loadA, address=address[0..8], out=outa);
    RAM512(in=in, load=loadB, address=address[0..8], out=outb);
    RAM512(in=in, load=loadC, address=address[0..8], out=outc);
    RAM512(in=in, load=loadD, address=address[0..8], out=outd);
    RAM512(in=in, load=loadE, address=address[0..8], out=oute);
    RAM512(in=in, load=loadF, address=address[0..8], out=outf);
    RAM512(in=in, load=loadG, address=address[0..8], out=outg);
    RAM512(in=in, load=loadH, address=address[0..8], out=outh);  

    Mux8Way16(a=outa, b=outb, c=outc, d=outd, e=oute, f=outf, g=outg, h=outh, sel=address[9..11], out=out);     

}