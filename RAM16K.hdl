// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load=1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out after the next time step.)
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // Put your code here:

    //NOTE: not using Dmuxes here to form RAM load lines because
    // 1) in reality, "load" path to RAMs will be a critical path.
    //  so must gate it in as late as possible to minimize its gate delays
    // if use Mux, then it is gated in from the beginning and
    //goes through the path of muxes before it reaches the RAMs
    //  
    // 2) RAMS are highly used parts.  This decode saves 1 gate, compared to using Dmuxes.

    Not(in=address[12], out=NotAddLow);
    Not(in=address[13], out=NotAddHi);

    //form decode of 2 msb address bits
    And(a=NotAddLow,   b=NotAddHi,     out=add00);
    And(a=address[12], b=NotAddHi,     out=add01);
    And(a=NotAddLow,   b=address[13],  out=add10);
    And(a=address[12], b=address[13],  out=add11);

    //enable with load 
    And(a=add00, b=load, out=loadA);
    And(a=add01, b=load, out=loadB);
    And(a=add10, b=load, out=loadC);
    And(a=add11, b=load, out=loadD);

    // RAMs
    RAM4K(in=in, load=loadA, address=address[0..11], out=outa);
    RAM4K(in=in, load=loadB, address=address[0..11], out=outb);
    RAM4K(in=in, load=loadC, address=address[0..11], out=outc);
    RAM4K(in=in, load=loadD, address=address[0..11], out=outd);

    //send the selected address to the output
    Mux4Way16(a=outa, b=outb, c=outc, d=outd, sel=address[12..13], out=out);     

}